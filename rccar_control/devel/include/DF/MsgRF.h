// Generated by gencpp from file DF/MsgRF.msg
// DO NOT EDIT!


#ifndef DF_MESSAGE_MSGRF_H
#define DF_MESSAGE_MSGRF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace DF
{
template <class ContainerAllocator>
struct MsgRF_
{
  typedef MsgRF_<ContainerAllocator> Type;

  MsgRF_()
    : stamp()
    , axis_x(0)
    , axis_y(0)
    , axis_setMode(0)  {
    }
  MsgRF_(const ContainerAllocator& _alloc)
    : stamp()
    , axis_x(0)
    , axis_y(0)
    , axis_setMode(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _axis_x_type;
  _axis_x_type axis_x;

   typedef int32_t _axis_y_type;
  _axis_y_type axis_y;

   typedef int32_t _axis_setMode_type;
  _axis_setMode_type axis_setMode;





  typedef boost::shared_ptr< ::DF::MsgRF_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::DF::MsgRF_<ContainerAllocator> const> ConstPtr;

}; // struct MsgRF_

typedef ::DF::MsgRF_<std::allocator<void> > MsgRF;

typedef boost::shared_ptr< ::DF::MsgRF > MsgRFPtr;
typedef boost::shared_ptr< ::DF::MsgRF const> MsgRFConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::DF::MsgRF_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::DF::MsgRF_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::DF::MsgRF_<ContainerAllocator1> & lhs, const ::DF::MsgRF_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.axis_x == rhs.axis_x &&
    lhs.axis_y == rhs.axis_y &&
    lhs.axis_setMode == rhs.axis_setMode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::DF::MsgRF_<ContainerAllocator1> & lhs, const ::DF::MsgRF_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace DF

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::DF::MsgRF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::DF::MsgRF_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::DF::MsgRF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::DF::MsgRF_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DF::MsgRF_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DF::MsgRF_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::DF::MsgRF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0fc0b336c867cc76e65ffd4a8ba7649";
  }

  static const char* value(const ::DF::MsgRF_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0fc0b336c867cc7ULL;
  static const uint64_t static_value2 = 0x6e65ffd4a8ba7649ULL;
};

template<class ContainerAllocator>
struct DataType< ::DF::MsgRF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DF/MsgRF";
  }

  static const char* value(const ::DF::MsgRF_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::DF::MsgRF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"int32 axis_x\n"
"int32 axis_y\n"
"int32 axis_setMode\n"
;
  }

  static const char* value(const ::DF::MsgRF_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::DF::MsgRF_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.axis_x);
      stream.next(m.axis_y);
      stream.next(m.axis_setMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgRF_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::DF::MsgRF_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::DF::MsgRF_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "axis_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.axis_x);
    s << indent << "axis_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.axis_y);
    s << indent << "axis_setMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.axis_setMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DF_MESSAGE_MSGRF_H
