// Generated by gencpp from file DF/MsgMode.msg
// DO NOT EDIT!


#ifndef DF_MESSAGE_MSGMODE_H
#define DF_MESSAGE_MSGMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace DF
{
template <class ContainerAllocator>
struct MsgMode_
{
  typedef MsgMode_<ContainerAllocator> Type;

  MsgMode_()
    : modeA(false)
    , modeB(false)  {
    }
  MsgMode_(const ContainerAllocator& _alloc)
    : modeA(false)
    , modeB(false)  {
  (void)_alloc;
    }



   typedef uint8_t _modeA_type;
  _modeA_type modeA;

   typedef uint8_t _modeB_type;
  _modeB_type modeB;





  typedef boost::shared_ptr< ::DF::MsgMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::DF::MsgMode_<ContainerAllocator> const> ConstPtr;

}; // struct MsgMode_

typedef ::DF::MsgMode_<std::allocator<void> > MsgMode;

typedef boost::shared_ptr< ::DF::MsgMode > MsgModePtr;
typedef boost::shared_ptr< ::DF::MsgMode const> MsgModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::DF::MsgMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::DF::MsgMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::DF::MsgMode_<ContainerAllocator1> & lhs, const ::DF::MsgMode_<ContainerAllocator2> & rhs)
{
  return lhs.modeA == rhs.modeA &&
    lhs.modeB == rhs.modeB;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::DF::MsgMode_<ContainerAllocator1> & lhs, const ::DF::MsgMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace DF

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::DF::MsgMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::DF::MsgMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::DF::MsgMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::DF::MsgMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DF::MsgMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DF::MsgMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::DF::MsgMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c191ef596c6c709f494df252088325a1";
  }

  static const char* value(const ::DF::MsgMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc191ef596c6c709fULL;
  static const uint64_t static_value2 = 0x494df252088325a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::DF::MsgMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DF/MsgMode";
  }

  static const char* value(const ::DF::MsgMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::DF::MsgMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool modeA\n"
"bool modeB\n"
;
  }

  static const char* value(const ::DF::MsgMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::DF::MsgMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.modeA);
      stream.next(m.modeB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::DF::MsgMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::DF::MsgMode_<ContainerAllocator>& v)
  {
    s << indent << "modeA: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.modeA);
    s << indent << "modeB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.modeB);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DF_MESSAGE_MSGMODE_H
