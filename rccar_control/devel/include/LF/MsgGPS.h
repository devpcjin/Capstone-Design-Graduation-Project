// Generated by gencpp from file LF/MsgGPS.msg
// DO NOT EDIT!


#ifndef LF_MESSAGE_MSGGPS_H
#define LF_MESSAGE_MSGGPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace LF
{
template <class ContainerAllocator>
struct MsgGPS_
{
  typedef MsgGPS_<ContainerAllocator> Type;

  MsgGPS_()
    : lati(0.0)
    , longi(0.0)  {
    }
  MsgGPS_(const ContainerAllocator& _alloc)
    : lati(0.0)
    , longi(0.0)  {
  (void)_alloc;
    }



   typedef double _lati_type;
  _lati_type lati;

   typedef double _longi_type;
  _longi_type longi;





  typedef boost::shared_ptr< ::LF::MsgGPS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::LF::MsgGPS_<ContainerAllocator> const> ConstPtr;

}; // struct MsgGPS_

typedef ::LF::MsgGPS_<std::allocator<void> > MsgGPS;

typedef boost::shared_ptr< ::LF::MsgGPS > MsgGPSPtr;
typedef boost::shared_ptr< ::LF::MsgGPS const> MsgGPSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::LF::MsgGPS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::LF::MsgGPS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::LF::MsgGPS_<ContainerAllocator1> & lhs, const ::LF::MsgGPS_<ContainerAllocator2> & rhs)
{
  return lhs.lati == rhs.lati &&
    lhs.longi == rhs.longi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::LF::MsgGPS_<ContainerAllocator1> & lhs, const ::LF::MsgGPS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace LF

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::LF::MsgGPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::LF::MsgGPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::LF::MsgGPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::LF::MsgGPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::LF::MsgGPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::LF::MsgGPS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::LF::MsgGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "133854799976de73c17e7e3d8d5130e7";
  }

  static const char* value(const ::LF::MsgGPS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x133854799976de73ULL;
  static const uint64_t static_value2 = 0xc17e7e3d8d5130e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::LF::MsgGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LF/MsgGPS";
  }

  static const char* value(const ::LF::MsgGPS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::LF::MsgGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lati \n"
"float64 longi\n"
;
  }

  static const char* value(const ::LF::MsgGPS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::LF::MsgGPS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lati);
      stream.next(m.longi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgGPS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::LF::MsgGPS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::LF::MsgGPS_<ContainerAllocator>& v)
  {
    s << indent << "lati: ";
    Printer<double>::stream(s, indent + "  ", v.lati);
    s << indent << "longi: ";
    Printer<double>::stream(s, indent + "  ", v.longi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LF_MESSAGE_MSGGPS_H
