// Generated by gencpp from file LF/MsgDetect.msg
// DO NOT EDIT!


#ifndef LF_MESSAGE_MSGDETECT_H
#define LF_MESSAGE_MSGDETECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace LF
{
template <class ContainerAllocator>
struct MsgDetect_
{
  typedef MsgDetect_<ContainerAllocator> Type;

  MsgDetect_()
    : detect(0)  {
    }
  MsgDetect_(const ContainerAllocator& _alloc)
    : detect(0)  {
  (void)_alloc;
    }



   typedef int32_t _detect_type;
  _detect_type detect;





  typedef boost::shared_ptr< ::LF::MsgDetect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::LF::MsgDetect_<ContainerAllocator> const> ConstPtr;

}; // struct MsgDetect_

typedef ::LF::MsgDetect_<std::allocator<void> > MsgDetect;

typedef boost::shared_ptr< ::LF::MsgDetect > MsgDetectPtr;
typedef boost::shared_ptr< ::LF::MsgDetect const> MsgDetectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::LF::MsgDetect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::LF::MsgDetect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::LF::MsgDetect_<ContainerAllocator1> & lhs, const ::LF::MsgDetect_<ContainerAllocator2> & rhs)
{
  return lhs.detect == rhs.detect;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::LF::MsgDetect_<ContainerAllocator1> & lhs, const ::LF::MsgDetect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace LF

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::LF::MsgDetect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::LF::MsgDetect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::LF::MsgDetect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::LF::MsgDetect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::LF::MsgDetect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::LF::MsgDetect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::LF::MsgDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cbf5ce45bbe7286edd5b1ffe23d39a0";
  }

  static const char* value(const ::LF::MsgDetect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cbf5ce45bbe7286ULL;
  static const uint64_t static_value2 = 0xedd5b1ffe23d39a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::LF::MsgDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LF/MsgDetect";
  }

  static const char* value(const ::LF::MsgDetect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::LF::MsgDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 detect\n"
"\n"
;
  }

  static const char* value(const ::LF::MsgDetect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::LF::MsgDetect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detect);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgDetect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::LF::MsgDetect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::LF::MsgDetect_<ContainerAllocator>& v)
  {
    s << indent << "detect: ";
    Printer<int32_t>::stream(s, indent + "  ", v.detect);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LF_MESSAGE_MSGDETECT_H
